<tool id="ctao_astro_tool" name="CTAO" version="0.0.1+galaxy0" profile="23.0">
  <requirements>
    <requirement type="package" version="0.8.10">davix</requirement>
    <requirement type="package" version="6.0">unzip</requirement>
    <requirement type="package" version="9.0.0">ipython</requirement>
    <requirement type="package" version="7.0.1">astropy</requirement>
    <requirement type="package" version="2.2.3">numpy</requirement>
    <!--Requirements string 'nb2workflow
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
    <requirement type="package" version="1.2">gammapy</requirement>
    <!--Requirements string 'ctadata>=0.6.0
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
    <requirement type="package" version="3.9.2">matplotlib</requirement>
    <requirement type="package" version="1.2.27">oda-api</requirement>
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${_data_product._selector}.py'</command>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" data_style="paths" />
  </configfiles>
  <environment_variables>
    <environment_variable name="BASEDIR">$__tool_directory__</environment_variable>
    <environment_variable name="GALAXY_TOOL_DIR">$__tool_directory__</environment_variable>
  </environment_variables>
  <inputs>
    <conditional name="_data_product">
      <param name="_selector" type="select" label="Data Product">
        <option value="spectrum" selected="true">spectrum</option>
        <option value="Find_data" selected="false">Find_data</option>
        <option value="observations" selected="false">observations</option>
        <option value="image" selected="false">image</option>
      </param>
      <when value="spectrum">
        <param name="token" type="text" value="" label="used for data access" />
        <param name="src_name" type="text" value="Mrk 501" label="src_name" />
        <param name="T1" type="text" value="2028-01-01T00:00:00.0" label="T1" />
        <param name="T2" type="text" value="2028-12-31T23:59:59.0" label="T2" />
        <param name="RA" type="float" value="0" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="0" label="DEC (unit: deg)" />
        <param name="Emin" type="float" value="0.1" label="minimal energy (unit: TeV)" />
        <param name="Emax" type="float" value="10.0" label="maximal energy (unit: TeV)" />
        <param name="radius" type="float" value="2.0" label="Size of the Region-Of-Interest (ROI) (unit: deg)" />
        <param name="on_region_radius" type="float" value="0.2" label="ON region radius (unit: deg)" />
        <param name="nbin_per_decade" type="integer" value="5" label="nbin_per_decade" />
        <param name="max_observations" type="integer" value="50" label="limit total amount of observations to use" />
      </when>
      <when value="Find_data">
        <param name="src_name" type="text" value="1ES 1218+304" label="src_name" />
        <param name="RA" type="float" value="185.3414279" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="30.17698848" label="DEC (unit: deg)" />
        <param name="T1" type="text" value="2020-01-01T00:00:00.0" label="T1" />
        <param name="T2" type="text" value="2022-04-01T00:00:00.0" label="T2" />
        <param name="Radius" type="float" value="15.0" label="Size of the Region-Of-Interest (ROI) (unit: deg)" />
      </when>
      <when value="observations">
        <param name="token" type="text" value="" label="token used for data access" />
        <param name="src_name" type="text" value="Mrk 501" label="src_name" />
        <param name="T1" type="text" value="2028-01-01T00:00:00.0" label="T1" />
        <param name="T2" type="text" value="2028-12-31T23:59:59.0" label="T2" />
        <param name="RA" type="float" value="0" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="0" label="DEC (unit: deg)" />
        <param name="radius" type="float" value="2.0" label="Size of the Region-Of-Interest (ROI) (unit: deg)" />
      </when>
      <when value="image">
        <param name="token" type="text" value="" label="used for data access" />
        <param name="src_name" type="text" value="Mrk 501" label="src_name" />
        <param name="T1" type="text" value="2028-01-01T00:00:00.0" label="T1" />
        <param name="T2" type="text" value="2028-12-31T23:59:59.0" label="T2" />
        <param name="RA" type="float" value="0" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="0" label="DEC (unit: deg)" />
        <param name="Emin" type="float" value="0.1" label="minimal energy (unit: TeV)" />
        <param name="Emax" type="float" value="10.0" label="maximal energy (unit: TeV)" />
        <param name="radius" type="float" value="2.0" label="Size of the Region-Of-Interest (ROI) (unit: deg)" />
        <param name="max_observations" type="integer" value="50" label="limit total amount of observations to use" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; spectrum stacked_model_params" name="out_spectrum_stacked_model_params" format="auto" from_work_dir="stacked_model_params_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum joined_model_params" name="out_spectrum_joined_model_params" format="auto" from_work_dir="joined_model_params_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum info" name="out_spectrum_info" format="auto" from_work_dir="info_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum observations" name="out_spectrum_observations" format="auto" from_work_dir="observations_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum flux_points" name="out_spectrum_flux_points" format="auto" from_work_dir="flux_points_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum counts_fit_image" name="out_spectrum_counts_fit_image" format="auto" from_work_dir="counts_fit_image_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum excess_events_image" name="out_spectrum_excess_events_image" format="auto" from_work_dir="excess_events_image_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum flux_points_image" name="out_spectrum_flux_points_image" format="auto" from_work_dir="flux_points_image_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; spectrum spec_fit_image" name="out_spectrum_spec_fit_image" format="auto" from_work_dir="spec_fit_image_galaxy.output">
      <filter>_data_product['_selector'] == 'spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; observations observations" name="out_observations_observations" format="auto" from_work_dir="observations_galaxy.output">
      <filter>_data_product['_selector'] == 'observations'</filter>
    </data>
    <data label="${tool.name} -&gt; image source_image" name="out_image_source_image" format="auto" from_work_dir="source_image_galaxy.output">
      <filter>_data_product['_selector'] == 'image'</filter>
    </data>
    <data label="${tool.name} -&gt; image observations" name="out_image_observations" format="auto" from_work_dir="observations_galaxy.output">
      <filter>_data_product['_selector'] == 'image'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="9">
      <conditional name="_data_product">
        <param name="_selector" value="spectrum" />
        <param name="token" value="" />
        <param name="src_name" value="Mrk 501" />
        <param name="T1" value="2028-01-01T00:00:00.0" />
        <param name="T2" value="2028-12-31T23:59:59.0" />
        <param name="RA" value="0" />
        <param name="DEC" value="0" />
        <param name="Emin" value="0.1" />
        <param name="Emax" value="10.0" />
        <param name="radius" value="2.0" />
        <param name="on_region_radius" value="0.2" />
        <param name="nbin_per_decade" value="5" />
        <param name="max_observations" value="50" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="0">
      <conditional name="_data_product">
        <param name="_selector" value="Find_data" />
        <param name="src_name" value="1ES 1218+304" />
        <param name="RA" value="185.3414279" />
        <param name="DEC" value="30.17698848" />
        <param name="T1" value="2020-01-01T00:00:00.0" />
        <param name="T2" value="2022-04-01T00:00:00.0" />
        <param name="Radius" value="15.0" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="1">
      <conditional name="_data_product">
        <param name="_selector" value="observations" />
        <param name="token" value="" />
        <param name="src_name" value="Mrk 501" />
        <param name="T1" value="2028-01-01T00:00:00.0" />
        <param name="T2" value="2028-12-31T23:59:59.0" />
        <param name="RA" value="0" />
        <param name="DEC" value="0" />
        <param name="radius" value="2.0" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="2">
      <conditional name="_data_product">
        <param name="_selector" value="image" />
        <param name="token" value="" />
        <param name="src_name" value="Mrk 501" />
        <param name="T1" value="2028-01-01T00:00:00.0" />
        <param name="T2" value="2028-12-31T23:59:59.0" />
        <param name="RA" value="0" />
        <param name="DEC" value="0" />
        <param name="Emin" value="0.1" />
        <param name="Emax" value="10.0" />
        <param name="radius" value="2.0" />
        <param name="max_observations" value="50" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
  <help>CTAO
====

This service provides basic analysis tools for CTAO scientific data
challenge (SDC). To access the SDC data with this service tools one
needs to generate OpenID Connect token e.g.&#160;using
`ctadata &lt;https://github.com/cta-epfl/ctadata&gt;`__ package and supply it
as one of the obligatory parameters.

References
----------

[1] Project [repository]
(https://gitlab.renkulab.io/astronomy/mmoda/ctao)
</help>
  <citations>
    <citation type="bibtex">@misc{label,
			title = {Tool repository},
			url = {https://renkulab.io/projects/astronomy/mmoda/ctao},
			author = {Oleg Kalashev and Andrii Neronov},
			year = {2025},
			note = {}
		}</citation>
  </citations>
</tool>