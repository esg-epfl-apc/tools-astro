<tool id="cta_astro_tool" name="CTA" version="0.0.1+galaxy0" profile="23.0">
  <requirements>
    <requirement type="package" version="8.22.1">ipython</requirement>
    <requirement type="package" version="5.3">astropy</requirement>
    <requirement type="package" version="1.26.4">numpy</requirement>
    <requirement type="package" version="1.12.0">scipy</requirement>
    <requirement type="package" version="2.25.2">iminuit</requirement>
    <requirement type="package" version="3.8.3">matplotlib</requirement>
    <requirement type="package" version="1.20.3">wget</requirement>
    <requirement type="package" version="0.70.16">multiprocess</requirement>
    <requirement type="package" version="1.2.12">oda-api</requirement>
    <requirement type="package" version="7.16.1">nbconvert</requirement>
    <requirement type="package" version="1.1">gammapy</requirement>
    <requirement type="package" version="0.4.6">astroquery</requirement>
    <!--Requirements string 'nb2workflow[cwl,service,rdf,mmoda]>=1.3.30 
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${_data_product._selector}.py'</command>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" data_style="paths" />
  </configfiles>
  <inputs>
    <conditional name="_data_product">
      <param name="_selector" type="select" label="Data Product">
        <option value="model_CTA_events_from_file" selected="true">model_CTA_events_from_file</option>
        <option value="model_CTA_events" selected="false">model_CTA_events</option>
      </param>
      <when value="model_CTA_events_from_file">
        <param name="Texp" type="float" value="2.4" label="Texp (unit: hour)" />
        <param name="file_path" type="data" label="file_path" />
        <param name="file_url" type="text" value="" label="file_url" />
        <param name="F0" type="float" value="4e-13" label="F0" />
        <param name="E0" type="float" value="1.0" label="E0 (unit: TeV)" />
        <param name="Emax" type="integer" value="30" label="Emax (unit: TeV)" />
        <param name="Emin" type="float" value="0.1" label="Emin (unit: TeV)" />
      </when>
      <when value="model_CTA_events">
        <param name="src_name" type="text" value="Mrk 421" label="src_name" />
        <param name="RA" type="float" value="166.113809" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="38.208833" label="DEC (unit: deg)" />
        <param name="T1" type="text" value="2000-10-09T13:16:00.0" label="T1" />
        <param name="T2" type="text" value="2022-10-10T13:16:00.0" label="T2" />
        <param name="Texp" type="float" value="50.0" label="Texp (unit: hour)" />
        <param name="z" type="float" value="0.1" label="z" />
        <param name="F0" type="float" value="4e-13" label="F0" />
        <param name="E0" type="float" value="1.0" label="E0 (unit: TeV)" />
        <param name="Gamma" type="float" value="1.75" label="Gamma" />
        <param name="sigma" type="float" value="0.0" label="sigma" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; model_CTA_events_from_file theta2" name="out_model_CTA_events_from_file_theta2" format="auto" from_work_dir="theta2_galaxy.output">
      <filter>_data_product['_selector'] == 'model_CTA_events_from_file'</filter>
    </data>
    <data label="${tool.name} -&gt; model_CTA_events_from_file events_fits" name="out_model_CTA_events_from_file_events_fits" format="auto" from_work_dir="events_fits_galaxy.output">
      <filter>_data_product['_selector'] == 'model_CTA_events_from_file'</filter>
    </data>
    <data label="${tool.name} -&gt; model_CTA_events theta2" name="out_model_CTA_events_theta2" format="auto" from_work_dir="theta2_galaxy.output">
      <filter>_data_product['_selector'] == 'model_CTA_events'</filter>
    </data>
    <data label="${tool.name} -&gt; model_CTA_events spectrum" name="out_model_CTA_events_spectrum" format="auto" from_work_dir="spectrum_galaxy.output">
      <filter>_data_product['_selector'] == 'model_CTA_events'</filter>
    </data>
    <data label="${tool.name} -&gt; model_CTA_events events_fits" name="out_model_CTA_events_events_fits" format="auto" from_work_dir="events_fits_galaxy.output">
      <filter>_data_product['_selector'] == 'model_CTA_events'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="2">
      <conditional name="_data_product">
        <param name="_selector" value="model_CTA_events_from_file" />
        <param name="Texp" value="2.4" />
        <param name="file_path" value="None" />
        <param name="file_url" value="" />
        <param name="F0" value="4e-13" />
        <param name="E0" value="1.0" />
        <param name="Emax" value="30" />
        <param name="Emin" value="0.1" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="3">
      <conditional name="_data_product">
        <param name="_selector" value="model_CTA_events" />
        <param name="src_name" value="Mrk 421" />
        <param name="RA" value="166.113809" />
        <param name="DEC" value="38.208833" />
        <param name="T1" value="2000-10-09T13:16:00.0" />
        <param name="T2" value="2022-10-10T13:16:00.0" />
        <param name="Texp" value="50.0" />
        <param name="z" value="0.1" />
        <param name="F0" value="4e-13" />
        <param name="E0" value="1.0" />
        <param name="Gamma" value="1.75" />
        <param name="sigma" value="0.0" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
</tool>