<tool id="cta_astro_tool" name="CTA" version="0.0.1+galaxy0" profile="23.0">
  <requirements>
    <requirement type="package" version="6.0">unzip</requirement>
    <requirement type="package" version="2.31.0">requests</requirement>
    <requirement type="package" version="1.2">gammapy</requirement>
    <requirement type="package" version="5.3">astropy</requirement>
    <requirement type="package" version="3.8.4">matplotlib</requirement>
    <requirement type="package" version="1.11.4">scipy</requirement>
    <requirement type="package" version="1.2.15">oda-api</requirement>
    <requirement type="package" version="8.22.2">ipython</requirement>
    <!--Requirements string 'nb2workflow[cwl,service,rdf,mmoda]>=1.3.30 
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
    <requirement type="package" version="7.16.3">nbconvert</requirement>
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${_data_product._selector}.py'</command>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" data_style="paths" />
  </configfiles>
  <inputs>
    <conditional name="_data_product">
      <param name="_selector" type="select" label="Data Product">
        <option value="Simulate_pointing_using_pre-defined_model" selected="true">Simulate_pointing_using_pre-defined_model</option>
        <option value="Simulate_pointing_using_model_cube_file" selected="false">Simulate_pointing_using_model_cube_file</option>
      </param>
      <when value="Simulate_pointing_using_pre-defined_model">
        <param name="RA" type="float" value="166.113809" label="RA (unit: deg)" />
        <param name="DEC" type="float" value="38.208833" label="DEC (unit: deg)" />
        <param name="OffAxis_angle" type="float" value="0.78" label="OffAxis_angle (unit: deg)" />
        <param name="Radius" type="float" value="2.5" label="Radius (unit: deg)" />
        <param name="Texp" type="float" value="1.0" label="Texp (unit: hour)" />
        <param name="z" type="float" value="0.03" label="z" />
        <param name="F0" type="float" value="1e-11" label="F0" />
        <param name="E0" type="float" value="1.0" label="E0 (unit: TeV)" />
        <param name="Gamma" type="float" value="2.0" label="Gamma" />
        <param name="R_s" type="float" value="0.2" label="R_s" />
        <param name="Site" type="select" label="Site">
          <option value="North" selected="true">North</option>
          <option value="South">South</option>
        </param>
        <param name="LSTs" type="boolean" value="True" label="LSTs" />
        <param name="MSTs" type="boolean" value="True" label="MSTs" />
        <param name="SSTs" type="boolean" value="False" label="SSTs" />
      </when>
      <when value="Simulate_pointing_using_model_cube_file">
        <param name="Texp" type="float" value="2.4" label="Texp (unit: hour)" />
        <param name="file_path" type="data" label="file_path" format="data" />
        <param name="Emax" type="integer" value="30" label="Emax (unit: TeV)" />
        <param name="Emin" type="float" value="0.1" label="Emin (unit: TeV)" />
        <param name="norm_cm2_TeV_s" type="float" value="1e-12" label="norm_cm2_TeV_s" />
        <param name="norm_energy" type="float" value="1.0" label="norm_energy (unit: TeV)" />
        <param name="pointing_shift" type="float" value="0.2" label="pointing_shift (unit: deg)" />
        <param name="pixsize" type="float" value="0.1" label="pixsize (unit: deg)" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; Simulate_pointing_using_pre-defined_model image_png" name="out_Simulate_pointing_using_pre-defined_model_image_png" format="auto" from_work_dir="image_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_pre-defined_model'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_pre-defined_model theta2_png" name="out_Simulate_pointing_using_pre-defined_model_theta2_png" format="auto" from_work_dir="theta2_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_pre-defined_model'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_pre-defined_model spectrum_png" name="out_Simulate_pointing_using_pre-defined_model_spectrum_png" format="auto" from_work_dir="spectrum_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_pre-defined_model'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_pre-defined_model event_list_fits" name="out_Simulate_pointing_using_pre-defined_model_event_list_fits" format="auto" from_work_dir="event_list_fits_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_pre-defined_model'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_model_cube_file spectrum_plot" name="out_Simulate_pointing_using_model_cube_file_spectrum_plot" format="auto" from_work_dir="spectrum_plot_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_model_cube_file'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_model_cube_file theta_plot" name="out_Simulate_pointing_using_model_cube_file_theta_plot" format="auto" from_work_dir="theta_plot_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_model_cube_file'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_model_cube_file picture" name="out_Simulate_pointing_using_model_cube_file_picture" format="auto" from_work_dir="picture_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_model_cube_file'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_model_cube_file image" name="out_Simulate_pointing_using_model_cube_file_image" format="auto" from_work_dir="image_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_model_cube_file'</filter>
    </data>
    <data label="${tool.name} -&gt; Simulate_pointing_using_model_cube_file event_list" name="out_Simulate_pointing_using_model_cube_file_event_list" format="auto" from_work_dir="event_list_galaxy.output">
      <filter>_data_product['_selector'] == 'Simulate_pointing_using_model_cube_file'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="4">
      <conditional name="_data_product">
        <param name="_selector" value="Simulate_pointing_using_pre-defined_model" />
        <param name="RA" value="166.113809" />
        <param name="DEC" value="38.208833" />
        <param name="OffAxis_angle" value="0.78" />
        <param name="Radius" value="2.5" />
        <param name="Texp" value="1.0" />
        <param name="z" value="0.03" />
        <param name="F0" value="1e-11" />
        <param name="E0" value="1.0" />
        <param name="Gamma" value="2.0" />
        <param name="R_s" value="0.2" />
        <param name="Site" value="North" />
        <param name="LSTs" value="True" />
        <param name="MSTs" value="True" />
        <param name="SSTs" value="False" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="5">
      <conditional name="_data_product">
        <param name="_selector" value="Simulate_pointing_using_model_cube_file" />
        <param name="Texp" value="2.4" />
        <param name="file_path" location="https://gitlab.renkulab.io/astronomy/mmoda/cta/-/raw/f34258a61442be5147078df8fef93ee5f0dec69b/3d.fits" />
        <param name="Emax" value="30" />
        <param name="Emin" value="0.1" />
        <param name="norm_cm2_TeV_s" value="1e-12" />
        <param name="norm_energy" value="1.0" />
        <param name="pointing_shift" value="0.2" />
        <param name="pixsize" value="0.1" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
  <help>This service provides simulaiton of observations with `Cherenkov
Telescope Array (CTA) &lt;https://www.cta-observatory.org/&gt;`__ observatory
(now in construction), based on the Instrument Response Funcitons (IRF)
from Monte-Carlo Production 5: |DOI| analysis of publicly available data
of IceCube neutrino telescope, described by `IceCube Collaboration
(2021) &lt;https://arxiv.org/abs/2101.09836&gt;`__, using the
`SkyLLH &lt;https://icecube.github.io/skyllh/master/html/index.html&gt;`__
data analysis package. Three types of data products are generated: sky
images, source lightcurves and spectra.

The image that will be produced is a Test Statistic (TS) value map
around the reference source position. The TS values is computed for the
powerlaw spectral model of a source placed at the center of each pixel.
It is possible to either fix the slope of the spectrum or leave it free,
using a ``Fixed_slope`` / ``Free_slope`` switch. For the ``Fixed slope``
choice, it is possible to set the spectral slope setting the ``Slope``
parameter. It is possible to adjust the time interval of the analysis by
including or excluding fixed observation periods, IC40, IC59, IC79,
IC86-I, IC86-II-VII, onto which the IceCube dataset is divided (see
`IceCube Collaboration (2021) &lt;https://arxiv.org/abs/2101.09836&gt;`__ for
the time bounds of the periods, between 2008 and 2018).

Similar to the Image, the spectrum can be requested either for a fixed
spectral slope, or leaving the slope free in the spectral fitting, using
the ``Fixed_slope`` / ``Free_slope`` switch. For the fixed spectral
slope, the analysis builds a likelihood profile to find the best-fit
number of counts from the source and the error intervals (defined as the
boundaries of the interval in which the TS value decreases by 1 with
respect to the maximum, the 90% upper bound is defined at the upper
boundary of the interval at which the TS value decreases by 2.7). The
counts are converted to the flux normalisation using the
*calculate_fluxmodel_scaling_factor* funciton of SkyLLH. In the case of
``Free Slope`` choice, TS values are calculated as a function of the
source counts and spectral slope and 68% confidence contours are defined
as the level at which TS decreases by 2.3 with respect to the maximal
value. If the maximal TS value exceeds 6, the best-fit spectrum is
plotted together with the 68% confidence range &#8220;butterfly&#8221;. Otherwise,
an upper limit on the powerlaw type spectra is shown. This upper limit
is shown as a curve that is a tangent to the maximal possible powerlaw
spectrum (at 90% confidence level) for each spectral slope in the range
between 1 and 5.

For the lightcurve, the entire ten-year time span of IceCube public data
is divided into intevals corresponding to the IceCube observational
periods (from IC40 to IC86-VII). For each period, the source flux is
extracted assuming fixed spectral slope.

.. |DOI| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.5499840.svg
   :target: https://doi.org/10.5281/zenodo.5499840
</help>
</tool>