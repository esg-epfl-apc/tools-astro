<tool id="sgwb_astro_tool" name="SGWB" version="0.0.1+galaxy0" profile="23.0">
  <requirements>
    <requirement type="package" version="8.22.2">ipython</requirement>
    <requirement type="package" version="1.26.4">numpy</requirement>
    <requirement type="package" version="3.8.4">matplotlib</requirement>
    <requirement type="package" version="6.0.1">astropy</requirement>
    <requirement type="package" version="2.2.2">pandas</requirement>
    <requirement type="package" version="5.19.0">plotly</requirement>
    <requirement type="package" version="1.13.0">scipy</requirement>
    <requirement type="package" version="1.21.4">wget</requirement>
    <requirement type="package" version="1.2.15">oda-api</requirement>
    <requirement type="package" version="7.16.3">nbconvert</requirement>
    <!--Requirements string 'nb2workflow[cwl,service,rdf,mmoda]>=1.3.30 
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${_data_product._selector}.py'</command>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" data_style="paths" />
  </configfiles>
  <inputs>
    <conditional name="_data_product">
      <param name="_selector" type="select" label="Data Product">
        <option value="Model_spectrum" selected="true">Model_spectrum</option>
        <option value="Phase_transition_parameters" selected="false">Phase_transition_parameters</option>
      </param>
      <when value="Model_spectrum">
        <param name="T_star" type="float" value="0.178" label="T_star (unit: GeV)" />
        <param name="g_star" type="integer" value="20" label="g_star" />
        <param name="alpha" type="float" value="1.0" label="alpha" />
        <param name="beta_H" type="float" value="3.3" label="beta_H" />
        <param name="epsilon_turb" type="integer" value="1" label="epsilon_turb" />
        <param name="v_w" type="float" value="0.999" label="v_w" />
        <param name="h" type="float" value="0.7" label="h" />
      </when>
      <when value="Phase_transition_parameters">
        <param name="epsilon_turb" type="float" value="0.1" label="epsilon_turb" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; Model_spectrum png" name="out_Model_spectrum_png" format="auto" from_work_dir="png_galaxy.output">
      <filter>_data_product['_selector'] == 'Model_spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; Model_spectrum astropy_table" name="out_Model_spectrum_astropy_table" format="auto" from_work_dir="astropy_table_galaxy.output">
      <filter>_data_product['_selector'] == 'Model_spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; Phase_transition_parameters B_lambdaB_png" name="out_Phase_transition_parameters_B_lambdaB_png" format="auto" from_work_dir="B_lambdaB_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Phase_transition_parameters'</filter>
    </data>
    <data label="${tool.name} -&gt; Phase_transition_parameters T_Beta_png" name="out_Phase_transition_parameters_T_Beta_png" format="auto" from_work_dir="T_Beta_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Phase_transition_parameters'</filter>
    </data>
    <data label="${tool.name} -&gt; Phase_transition_parameters Alpha_Beta_png" name="out_Phase_transition_parameters_Alpha_Beta_png" format="auto" from_work_dir="Alpha_Beta_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Phase_transition_parameters'</filter>
    </data>
    <data label="${tool.name} -&gt; Phase_transition_parameters Alpha_T_png" name="out_Phase_transition_parameters_Alpha_T_png" format="auto" from_work_dir="Alpha_T_png_galaxy.output">
      <filter>_data_product['_selector'] == 'Phase_transition_parameters'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="2">
      <conditional name="_data_product">
        <param name="_selector" value="Model_spectrum" />
        <param name="T_star" value="0.178" />
        <param name="g_star" value="20" />
        <param name="alpha" value="1.0" />
        <param name="beta_H" value="3.3" />
        <param name="epsilon_turb" value="1" />
        <param name="v_w" value="0.999" />
        <param name="h" value="0.7" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="4">
      <conditional name="_data_product">
        <param name="_selector" value="Phase_transition_parameters" />
        <param name="epsilon_turb" value="0.1" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
  <help>This service provides a calculaiton of the power spectrum of Stochastic
Gravitational Wave Backgorund (SGWB) from a first-order cosmological
phase transition based on the parameterisztions described by `Roper Pol
et al.&#160;(2023) &lt;https://arxiv.org/abs/2307.10744&gt;`__. The power spectrum
includes two components: from the sound waves excited by collisions of
bubbles of the new phase and from the turbulence that is induced by
these collisions.

The cosmological epoch of the phase transition is described by the
temperature, :math:``T_star`` and by the number(s) of relativistic
degrees of freedom, :math:``g_star`` that should be specified as
parameters.

The phase transition itself is characterised by phenomenological
parameters, :math:``alpha``, :math:``beta_H`` and
:math:``epsilon_turb``, the latent heat, the ratio of the Hubble radius
to the bubble size at percolation and the fraction of the energy otuput
of the phase transition that goes into turbulence.
</help>
</tool>