<tool id="grb-detection_astro_tool" name="grb-detection_astro_tool" version="0.0.1+galaxy0" profile="23.0">
  <requirements>
    <requirement type="package" version="8.18.1">ipython</requirement>
    <requirement type="package" version="6.0.0">astropy</requirement>
    <requirement type="package" version="1.1">gammapy</requirement>
    <requirement type="package" version="3.8.2">matplotlib</requirement>
    <requirement type="package" version="0.4.6">astroquery</requirement>
    <requirement type="package" version="1.11.4">scipy</requirement>
    <requirement type="package" version="1.2.3">oda-api</requirement>
    <requirement type="package" version="7.13.0">nbconvert</requirement>
    <requirement type="package" version="1.20.3">wget</requirement>
    <requirement type="package" version="1.26.2">numpy</requirement>
    <!--Requirements string 'renku-aqs>=1.0.4
' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
    <requirement type="package" version="5.9.2">nbformat</requirement>
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${_data_product._selector}.py'</command>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" />
  </configfiles>
  <inputs>
    <conditional name="_data_product">
      <param name="_selector" type="select" label="Data Product">
        <option value="out" selected="true">out</option>
        <option value="detectgrb" selected="false">detectgrb</option>
      </param>
      <when value="out">
        <param name="T1" type="text" value="2023-01-16T04:53:33.9" label="T1" />
        <param name="T2" type="text" value="2023-01-16T04:55:33.9" label="T2" />
        <param name="detection_time_scales" type="text" value="1,10" label="detection_time_scales" />
        <param name="lc_time_scale" type="float" value="0.1" label="lc_time_scale" />
        <param name="background_age" type="integer" value="10" label="background_age" />
        <param name="min_sn" type="integer" value="5" label="min_sn" />
      </when>
      <when value="detectgrb">
        <param name="T1" type="text" value="2023-01-16T04:53:33.9" label="T1" />
        <param name="T2" type="text" value="2023-01-16T04:55:33.9" label="T2" />
        <param name="detection_time_scales" type="text" value="1,10" label="detection_time_scales" />
        <param name="lc_time_scale" type="float" value="0.1" label="lc_time_scale" />
        <param name="background_age" type="integer" value="10" label="background_age Units: s" />
        <param name="min_sn" type="integer" value="5" label="min_sn" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; out lc" name="out_out_lc" format="auto" from_work_dir="lc_galaxy.output">
      <filter>_data_product['_selector'] == 'out'</filter>
    </data>
    <data label="${tool.name} -&gt; out detection_comment" name="out_out_detection_comment" format="auto" from_work_dir="detection_comment_galaxy.output">
      <filter>_data_product['_selector'] == 'out'</filter>
    </data>
    <data label="${tool.name} -&gt; out image_output" name="out_out_image_output" format="auto" from_work_dir="image_output_galaxy.output">
      <filter>_data_product['_selector'] == 'out'</filter>
    </data>
    <data label="${tool.name} -&gt; detectgrb lc" name="out_detectgrb_lc" format="auto" from_work_dir="lc_galaxy.output">
      <filter>_data_product['_selector'] == 'detectgrb'</filter>
    </data>
    <data label="${tool.name} -&gt; detectgrb detection_comment" name="out_detectgrb_detection_comment" format="auto" from_work_dir="detection_comment_galaxy.output">
      <filter>_data_product['_selector'] == 'detectgrb'</filter>
    </data>
    <data label="${tool.name} -&gt; detectgrb image_output" name="out_detectgrb_image_output" format="auto" from_work_dir="image_output_galaxy.output">
      <filter>_data_product['_selector'] == 'detectgrb'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="3">
      <conditional name="_data_product">
        <param name="_selector" value="out" />
        <param name="T1" value="2023-01-16T04:53:33.9" />
        <param name="T2" value="2023-01-16T04:55:33.9" />
        <param name="detection_time_scales" value="1,10" />
        <param name="lc_time_scale" value="0.1" />
        <param name="background_age" value="10" />
        <param name="min_sn" value="5" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="3">
      <conditional name="_data_product">
        <param name="_selector" value="detectgrb" />
        <param name="T1" value="2023-01-16T04:53:33.9" />
        <param name="T2" value="2023-01-16T04:55:33.9" />
        <param name="detection_time_scales" value="1,10" />
        <param name="lc_time_scale" value="0.1" />
        <param name="background_age" value="10" />
        <param name="min_sn" value="5" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
</tool>